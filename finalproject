from flask import Flask
from flask import jsonify
from flask import request
import mysql.connector
from mysql.connector import Error

# testing database connection

# def create_con(hostname, username, pwd, dbname):
#     connection = None
#     try:
#         connection = mysql.connector.connect(
#             host=hostname,
#             user=username,
#             password=pwd,
#             database=dbname
#         )
#         print("Success: Connected to the database")
#     except Error as e:
#         print("Could not connect to database")
#     return connection

# conn = create_con('cis3368fall.cplpsxg0kzbu.us-east-1.rds.amazonaws.com', 'admin', '12345678', 'finalproject')
# cursor = conn.cursor(dictionary=True)
# sql = 'SELECT * FROM floor'
# cursor.execute(sql)
# rows = cursor.fetchall()

# test printing data from table
# for row in rows:
#     print(row)

# cursor.close()
# conn.close()

# connecting to database
db = mysql.connector.connect(
    host="cis3368fall.cplpsxg0kzbu.us-east-1.rds.amazonaws.com",
    user="admin",
    password="12345678",
    database="finalproject"
)

cursor = db.cursor()

# CRUD for Floor Table

# Create a floor
def create_floor(level, name):
    try:
        query = "INSERT INTO floor (level, name) VALUES (%s, %s)"
        values = (level, name)
        cursor.execute(query, values)
        db.commit()
        print(f"{name} has been created successfully")
    except mysql.connector.Error as err:
        print("Could not add floor")

# create_floor(21, "26th Floor")    
    
# READ floor
def read_floors():
    query = "SELECT * FROM floor"
    cursor.execute(query)
    floors = cursor.fetchall()
    for floor in floors:
        print(floor)

# read_floors()

# UPDATE floor 
def update_floor(id, level, name):
    try:
        query = "UPDATE floor SET level = %s, name = %s WHERE id = %s"
        values = (level, name, id)
        cursor.execute(query, values)
        db.commit()
        print(f"{name} was updated successfully")
    except mysql.connector.Error as err:
        print("Could not update floor")

# update_floor(1, 1, "Ground Floor")

# DELETE a floor
def delete_floor(floor_id):
    try:
        query = "DELETE FROM floor WHERE id = %s"
        values = (floor_id,)
        cursor.execute(query, values)
        db.commit()
        print(f"Floor was deleted successfully")
    except mysql.connector.Error as err:
        print("Could not delete floor")
        
# delete_floor(7)
    
# CRUD for Room Table

# CREATE a room
def create_room(capacity, number, floor_id):
    try:
        query = "INSERT INTO room (capacity, number, floor_id) VALUES (%s, %s, %s)"
        values = (capacity, number, floor_id)
        cursor.execute(query, values)
        db.commit()
        print("Room was created successfully")
    except mysql.connector.Error as err:
        print("Could not create room")

# create_room(2, 506, 5)  
    
# READ ROOM
def read_room():
    query = "SELECT * FROM room"
    cursor.execute(query)
    rooms = cursor.fetchall()
    for room in rooms:
        print(room)

# read_room()

# UPDATE room
def update_room(id, capacity, number, floor_id):
    try:
        query = "UPDATE room SET capacity = %s, number = %s, floor_id = %s WHERE id = %s"
        values = (capacity, number, floor_id, id)
        cursor.execute(query, values)
        db.commit()
        print(f"Room {number} was updated successfully")
    except mysql.connector.Error as err:
        print("Could not update room")
    
# update_room(28, 3, 506, 5)

# DELETE a room
def delete_room(id):
    try:
        query = "DELETE FROM room WHERE id = %s"
        values = (id,)
        cursor.execute(query, values)
        db.commit()
        print("Room was deleted successfully")
    except mysql.connector.Error as err:
        print("Could not delete room")

# delete_room(28)

# CRUD for Resident Table

# CREATE a resident
def create_resident(firstname, lastname, age, room_id):
    try:
        query = "INSERT INTO resident (firstname, lastname, age, room_id) VALUES (%s, %s, %s, %s)"
        values = (firstname, lastname, age, room_id)
        cursor.execute(query, values)
        db.commit()
        print(f"Resident {firstname} {lastname} was created successfully")
    except mysql.connector.Error as err:
        print("Could not create resident")

# create_resident('bimbert','pimpert', 69, 25)
    
# READ resident
def read_resident():
    query = "SELECT * FROM resident"
    cursor.execute(query)
    residents = cursor.fetchall()
    for resident in residents:
        print(resident)

# read_resident()

# UPDATE resident
def update_resident(firstname, lastname, age, room_id):
    try:
        query = "UPDATE resident SET firstname = %s, lastname = %s, age = %s, room_id = %s WHERE id = %s"
        values = (firstname, lastname, age, room_id)
        cursor.execute(query, values)
        db.commit()
        print(f"Resident {firstname} {lastname} was updated successfully")
    except mysql.connector.Error as err:
        print("Could not update resident")
    
# update_resident('Bimbert', 'Pimpert', 70, 133, 1)

# DELETE a resident
def delete_resident(id):
    try:
        query = "DELETE FROM resident WHERE id = %s"
        values = (id,)
        cursor.execute(query, values)
        db.commit()
        print("Resident was deleted successfully")
    except mysql.connector.Error as err:
        print("Could not delete resident")

delete_resident(186)
    

cursor.close()
db.close()