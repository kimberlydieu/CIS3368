from flask import Flask
from flask import jsonify
from flask import request
import mysql.connector
from mysql.connector import Error

# testing database connection

# def create_con(hostname, username, pwd, dbname):
#     connection = None
#     try:
#         connection = mysql.connector.connect(
#             host=hostname,
#             user=username,
#             password=pwd,
#             database=dbname
#         )
#         print("Success: Connected to the database")
#     except Error as e:
#         print("Could not connect to database")
#     return connection

# conn = create_con('cis3368fall.cplpsxg0kzbu.us-east-1.rds.amazonaws.com', 'admin', '12345678', 'finalproject')
# cursor = conn.cursor(dictionary=True)
# sql = 'SELECT * FROM floor'
# cursor.execute(sql)
# rows = cursor.fetchall()

# test printing data from table
# for row in rows:
#     print(row)

# cursor.close()
# conn.close()

# connecting to database
db = mysql.connector.connect(
    host="cis3368fall.cplpsxg0kzbu.us-east-1.rds.amazonaws.com",
    user="admin",
    password="12345678",
    database="finalproject"
)

cursor = db.cursor()

# ------------------------------------------------------------------------------------------------------
# BASIC CRUD OPS
# CRUD for Floor Table

# Create a floor
def create_floor(level, name):
    try:
        query = "INSERT INTO floor (level, name) VALUES (%s, %s)"
        values = (level, name)
        cursor.execute(query, values)
        db.commit()
        print(f"{name} has been created successfully")
    except mysql.connector.Error as err:
        print("Could not add floor")

# create_floor(21, "26th Floor")    
    
# READ floor
def read_floors():
    query = "SELECT * FROM floor"
    cursor.execute(query)
    floors = cursor.fetchall()
    for floor in floors:
        print(floor)

# read_floors()

# UPDATE floor 
def update_floor(id, level, name):
    try:
        query = "UPDATE floor SET level = %s, name = %s WHERE id = %s"
        values = (level, name, id)
        cursor.execute(query, values)
        db.commit()
        print(f"{name} was updated successfully")
    except mysql.connector.Error as err:
        print("Could not update floor")

# update_floor(1, 1, "Ground Floor")

# DELETE a floor
def delete_floor(floor_id):
    try:
        query = "DELETE FROM floor WHERE id = %s"
        values = (floor_id,)
        cursor.execute(query, values)
        db.commit()
        print(f"Floor was deleted successfully")
    except mysql.connector.Error as err:
        print("Could not delete floor")
        
# delete_floor(7)
    
# CRUD for Room Table

# CREATE a room
def create_room(capacity, number, floor_id):
    try:
        query = "INSERT INTO room (capacity, number, floor_id) VALUES (%s, %s, %s)"
        values = (capacity, number, floor_id)
        cursor.execute(query, values)
        db.commit()
        print("Room was created successfully")
    except mysql.connector.Error as err:
        print("Could not create room")

# create_room(2, 506, 5)  
    
# READ ROOM
def read_room():
    query = "SELECT * FROM room"
    cursor.execute(query)
    rooms = cursor.fetchall()
    for room in rooms:
        print(room)

# read_room()

# UPDATE room
def update_room(id, capacity, number, floor_id):
    try:
        query = "UPDATE room SET capacity = %s, number = %s, floor_id = %s WHERE id = %s"
        values = (capacity, number, floor_id, id)
        cursor.execute(query, values)
        db.commit()
        print(f"Room {number} was updated successfully")
    except mysql.connector.Error as err:
        print("Could not update room")
    
# update_room(28, 3, 506, 5)

# DELETE a room
def delete_room(id):
    try:
        query = "DELETE FROM room WHERE id = %s"
        values = (id,)
        cursor.execute(query, values)
        db.commit()
        print("Room was deleted successfully")
    except mysql.connector.Error as err:
        print("Could not delete room")

# delete_room(28)

# CRUD for Resident Table

# CREATE a resident
def create_resident(firstname, lastname, age, room_id):
    try:
        query = "INSERT INTO resident (firstname, lastname, age, room_id) VALUES (%s, %s, %s, %s)"
        values = (firstname, lastname, age, room_id)
        cursor.execute(query, values)
        db.commit()
        print(f"Resident {firstname} {lastname} was created successfully")
    except mysql.connector.Error as err:
        print("Could not create resident")

# create_resident('bimbert','pimpert', 69, 25)
    
# READ resident
def read_resident():
    query = "SELECT * FROM resident"
    cursor.execute(query)
    residents = cursor.fetchall()
    for resident in residents:
        print(resident)

# read_resident()

# UPDATE resident
def update_resident(firstname, lastname, age, room_id):
    try:
        query = "UPDATE resident SET firstname = %s, lastname = %s, age = %s, room_id = %s WHERE id = %s"
        values = (firstname, lastname, age, room_id)
        cursor.execute(query, values)
        db.commit()
        print(f"Resident {firstname} {lastname} was updated successfully")
    except mysql.connector.Error as err:
        print("Could not update resident")
    
# update_resident('Bimbert', 'Pimpert', 70, 133, 1)

# DELETE a resident
def delete_resident(id):
    try:
        query = "DELETE FROM resident WHERE id = %s"
        values = (id,)
        cursor.execute(query, values)
        db.commit()
        print("Resident was deleted successfully")
    except mysql.connector.Error as err:
        print("Could not delete resident")

# delete_resident(186)
    

# ------------------------------------------------------------------------------------------------------
# REST APIs for ALL TABLES

app = Flask(__name__)

# REST API for floor
# GET floor
@app.route('/floor', methods=['GET'])
def get_floors():
    try:
        query = "SELECT * FROM floor"
        cursor.execute(query)
        floors = cursor.fetchall()
        return jsonify(floors)
    except mysql.connector.Error as err:
        return jsonify({'error': str(err)})

# POST floor
@app.route('/floor', methods=['POST'])
def create_floor():
    try:
        data = request.get_json()
        level = data['level']
        name = data['name']
        query = "INSERT INTO floor (level, name) VALUES (%s, %s)"
        values = (level, name)
        cursor.execute(query, values)
        db.commit()
        return jsonify({'message': 'Floor created successfully'})
    except mysql.connector.Error as err:
        return jsonify({'error': str(err)})

# DELETE floor
@app.route("/floor/<int:floor_id>", methods=["DELETE"])
def delete_floor(floor_id):
    cursor = db.cursor()
    try:
        query = "DELETE FROM floor WHERE id = %s"
        values = (floor_id,)
        cursor.execute(query, values)
        db.commit()

        return jsonify({"message": "Floor deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)})

# UPDATE floor
@app.route("/floor/<int:floor_id>", methods=["PUT"])
def update_floor(floor_id):
    cursor = db.cursor()
    try:
        data = request.get_json()
        level = data["level"]
        name = data["name"]

        query = "UPDATE floor SET level = %s, name = %s WHERE id = %s"
        values = (level, name, floor_id)
        cursor.execute(query, values)
        db.commit()

        return jsonify({"message": "Floor updated successfully"})
    except Exception as e:
        return jsonify({"error": str(e)})



# REST API for room

# GET room
@app.route('/room', methods=['GET'])
def get_room():
    try:
        query = "SELECT * FROM room"
        cursor.execute(query)
        floors = cursor.fetchall()
        return jsonify(floors)
    except mysql.connector.Error as err:
        return jsonify({'error': str(err)})

# GET room information by room number
@app.route('/room/<int:number>', methods=['GET'])
def read_room(number):
    cursor.execute("SELECT * FROM room WHERE number = %s", (number,))
    room = cursor.fetchone()
    if room:
        return jsonify({'room': room})
    else:
        return jsonify({'message': 'Room not found'})

# POST room
@app.route('/room', methods=['POST'])
def create_room():
    if request.method == 'POST':
        try:
            data = request.get_json()
            capacity = data['capacity']
            number = data['number']
            floor_id = data['floor_id']

            cursor = db.cursor()
            cursor.execute("INSERT INTO room (capacity, number, floor_id) VALUES (%s, %s, %s)", (capacity, number, floor_id))
            db.commit()

            return jsonify({'message': 'Room created successfully'})
        except Exception as e:
            return jsonify({'error': str(e)})

# DELETE room by room number
@app.route('/room/<int:number>', methods=['DELETE'])
def delete_room(number):
    if request.method == 'DELETE':
        try:
            cursor = db.cursor()
            cursor.execute("DELETE FROM room WHERE number = %s", (number,))
            db.commit()

            if cursor.rowcount > 0:
                return jsonify({'message': f'Room {number} has been deleted successfully'})
            else:
                return jsonify({'message': f'Room {number} not found'})

        except Exception as e:
            return jsonify({'error': str(e)})

# UPDATE room by room number
@app.route('/room/<int:number>', methods=['PUT'])
def update_room(number):
    if request.method == 'PUT':
        try:
            cursor = db.cursor()
            data = request.json
            capacity = data.get('capacity')
            floor_id = data.get('floor_id')

            cursor.execute("SELECT * FROM room WHERE number = %s", (number,))
            room = cursor.fetchone()

            if not room:
                return jsonify({'message': f'Room with number {number} not found'})

            cursor.execute("UPDATE room SET capacity = %s, floor_id = %s WHERE number = %s",
                           (capacity, floor_id, number))
            db.commit()

            return jsonify({'message': f'Room with number {number} has been updated successfully'})
        except Exception as e:
            return jsonify({'error': str(e)})


# REST API for residents

# GET residents
@app.route('/resident', methods=['GET'])
def get_resident():
    try:
        query = "SELECT * FROM resident"
        cursor.execute(query)
        residents = cursor.fetchall()
        return jsonify(residents)
    except mysql.connector.Error as err:
        return jsonify({'error': str(err)})

# GET resident by ID
@app.route('/resident/<int:id>', methods=['GET'])
def read_resident(id):
    cursor.execute("SELECT * FROM resident WHERE id = %s", (id,))
    resident = cursor.fetchone()
    if resident:
        return jsonify({'resident': resident})
    else:
        return jsonify({'message': 'Resident not found'})

# POST resident
@app.route('/resident', methods=['POST'])
def create_resident():
    if request.method == 'POST':
        try:
            data = request.get_json()
            firstname = data['firstname']
            lastname = data['lastname']
            age = data['age']
            room_id = data['room_id']

            cursor = db.cursor()
            cursor.execute("INSERT INTO resident (firstname, lastname, age, room_id) VALUES (%s, %s, %s, %s)", (firstname, lastname, age, room_id))
            db.commit()

            return jsonify({'message': f'Resident {firstname} {lastname} created successfully'})
        except Exception as e:
            return jsonify({'error': str(e)})

# DELETE resident by ID
@app.route('/resident/<int:id>', methods=['DELETE'])
def delete_resident(id):
    if request.method == 'DELETE':
        try:
            cursor = db.cursor()
            cursor.execute("DELETE FROM resident WHERE id = %s", (id,))
            db.commit()

            if cursor.rowcount > 0:
                return jsonify({'message': f'Resident {id} has been deleted successfully'})
            else:
                return jsonify({'message': f'Resident {id} not found'})

        except Exception as e:
            return jsonify({'error': str(e)})

# UPDATE resident by ID
@app.route('/resident/<int:id>', methods=['PUT'])
def update_resident(id):
    if request.method == 'PUT':
        try:
            cursor = db.cursor()
            data = request.json
            firstname = data.get('firstname')
            lastname = data.get('lastname')
            age = data.get('age')
            room_id = data.get('room_id')

            cursor.execute("SELECT * FROM resident WHERE id = %s", (id,))
            resident = cursor.fetchone()

            if not resident:
                return jsonify({'message': f'Resident with id {id} not found'})

            cursor.execute("UPDATE resident SET firstname = %s, lastname = %s, age = %s, room_id = %s WHERE id = %s",
                           (firstname, lastname, age, room_id, id))
            db.commit()

            return jsonify({'message': f'Resident {id}, {firstname} {lastname}, has been updated successfully'})
        except Exception as e:
            return jsonify({'error': str(e)})
        
        
# Login API
users = [
    {"username": "user", "password": "password"},]

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data['username']
    password = data['password']

    # Check if the provided credentials are in the user database
    user = next((user for user in users if user['username'] == username), None)

    if user and user['password'] == password:
        return jsonify({"message": "Login successful"})
    else:
        return jsonify({"message": "Login failed"})



if __name__ == '__main__':
    app.run(debug=True)
    
cursor.close()
db.close()





